---

- name: Snapper configuration
  block:
    - name: Add the GPG key for the repository for Debian 12
      ansible.builtin.apt_key:
        url: https://download.opensuse.org/repositories/filesystems:snapper/Debian_12/Release.key
        keyring: /etc/apt/trusted.gpg.d/filesystems_snapper.gpg
        state: present

    - name: Add the repository to apt sources
      ansible.builtin.apt_repository:
        repo: "deb http://download.opensuse.org/repositories/filesystems:/snapper/Debian_12/ /"
        state: present
        filename: "filesystems_snapper"

    - name: Install snapper
      ansible.builtin.apt:
        name:
          - snapper
        state: present
        update_cache: true

    - name: Ensure the base config is named 'default'
      ansible.builtin.copy:
        src: /usr/share/snapper/config-templates/default
        dest: /etc/snapper/configs/default
        mode: "0644"
        remote_src: true

    - name: Ensure 'TIMELINE_CREATE="no"' in the 'default' Snapper configuration
      ansible.builtin.lineinfile:
        path: /etc/snapper/configs/default
        regexp: ^TIMELINE_CREATE=
        line: TIMELINE_CREATE="no"

    - name: Verify existing snapper configs
      ansible.builtin.command:
        cmd: snapper list-configs
      register: snapper_configs
      changed_when: false
      ignore_errors: true

    - name: Display snapper_configs
      ansible.builtin.debug:
        var: snapper_configs

    - name: Check if snapper config for each data disk is valid
      ansible.builtin.set_fact:
        config_valid: "{{ 'data%02d' % item in snapper_configs.stdout }}"
      loop: "{{ range(1, data_disks | length + 1) }}"
      register: config_validity

    - name: Conditionally rebuild snapper configs if data_disks exist
      when:
        - data_disks is defined
        - data_disks|length > 0
      block:
        - name: Destroy invalid snapper configurations
          ansible.builtin.command:
            cmd: snapper -c data{{ '%02d' % item }} delete-config
          loop: "{{ range(1, data_disks | length + 1) }}"
          when: not config_validity.results[item-1].ansible_facts.config_valid
          ignore_errors: true

        - name: Attempt to create Snapper configuration
          ansible.builtin.command:
            cmd: snapper -c data{{ '%02d' % item }} create-config -t default {{ data_mount_path }}/data{{ '%02d' % item }}
          register: create_config_result
          changed_when: create_config_result.rc == 0
          ignore_errors: true
          loop: "{{ range(1, data_disks | length + 1) }}"
          when: not config_validity.results[item-1].ansible_facts.config_valid

        - name: Discover snapshots
          ansible.builtin.find:
            path: "{{ data_mount_path }}/data{{ '%02d' % item }}/.snapshots"
            file_type: directory
          loop: "{{ range(1, data_disks | length + 1) }}"
          loop_control:
            label: "data{{ '%02d' % item }}"
          when:
            - not config_validity.results[item-1].ansible_facts.config_valid
            - "'creating btrfs subvolume .snapshots failed since it already exists' in create_config_result.results[item-1].stderr"
          register: snapshots

        - name: Remove existing snapshots for failed configs  # noqa command-instead-of-module
          ansible.builtin.command:
            cmd: btrfs subvolume delete -C {{ item }}/snapshot
          loop: >-
            {{
              snapshots.results | selectattr('matched', '>', 0) | map(attribute='files') | flatten | map(attribute='path')
              if snapshots is not skipped else []
            }}
          when: snapshots is not skipped
          ignore_errors: true

        - name: Remove .snapshots subvolume for failed configs  # noqa command-instead-of-module
          ansible.builtin.command:
            cmd: btrfs subvolume delete -C {{ data_mount_path }}/data{{ '%02d' % item }}/.snapshots
          loop: "{{ range(1, data_disks | length + 1) }}"
          when: snapshots is not skipped
          ignore_errors: true

        - name: Retry creating Snapper configuration for failed configs
          ansible.builtin.command:
            cmd: snapper -c data{{ '%02d' % item }} create-config -t default {{ data_mount_path }}/data{{ '%02d' % item }}
          loop: "{{ range(1, data_disks | length + 1) }}"
          when: snapshots is not skipped
          register: create_config_result_retry
          changed_when: create_config_result_retry.rc == 0
          ignore_errors: true

    - name: Ensure 'TIMELINE_CREATE="no"' in each data disk's Snapper configuration
      ansible.builtin.lineinfile:
        path: /etc/snapper/configs/data{{ '%02d' % item }}
        regexp: ^TIMELINE_CREATE=
        line: TIMELINE_CREATE="no"
      loop: "{{ range(1, data_disks | length + 1) }}"
      when: data_disks is defined and data_disks|length > 0
      ignore_errors: true

    - name: Verify snapper configs
      ansible.builtin.command:
        cmd: snapper list-configs
      register: snapper_configs_new
      changed_when: false

    - name: Display snapper_configs
      ansible.builtin.debug:
        var: snapper_configs_new

    - name: Verify snapraid-btrfs can see Snapper configs
      ansible.builtin.command:
        cmd: /usr/local/bin/snapraid-btrfs list
      register: snapraid_btrfs_output
      changed_when: false
      ignore_errors: true

    - name: Check for invalid btrfs subvolume and snapper config creation failure
      ansible.builtin.set_fact:
        invalid_subvolume: "{{ 'is not a valid btrfs subvolume' in snapraid_btrfs_output.stderr }}"
        snapper_config_creation_failed: >-
          {{
            not ansible_check_mode
            and ((create_config_result.rc != 0 if create_config_result is not skipped else false)
            or (create_config_result_retry.rc != 0 if create_config_result_retry is not skipped else false))
          }}

    - name: Display snapraid-btrfs output
      ansible.builtin.debug:
        var: snapraid_btrfs_output.stdout_lines

    - name: Fail if invalid subvolume detected
      ansible.builtin.fail:
        msg: "Invalid btrfs subvolume detected. Initiating reset process."
      when: invalid_subvolume | bool

    - name: Fail if snapper config creation failed
      ansible.builtin.fail:
        msg: "Snapper config creation failed. Initiating reset process."
      when: snapper_config_creation_failed | bool

  rescue:
    - name: Reset Snapper configurations
      block:
        - name: Clear SNAPPER_CONFIGS
          ansible.builtin.lineinfile:
            path: "{{ item }}"
            regexp: '^SNAPPER_CONFIGS='
            line: 'SNAPPER_CONFIGS=""'
          loop:
            - /etc/default/snapper # old default snapper config path
            - /etc/sysconfig/snapper
          ignore_errors: true

        - name: Remove individual snapper configs
          ansible.builtin.file:
            path: "/etc/snapper/configs/data{{ '%02d' % item }}"
            state: absent
          loop: "{{ range(1, data_disks | length + 1) | list }}"

        - name: Get list of snapshots for each data disk
          ansible.builtin.find:
            paths: "{{ data_mount_path }}/data{{ '%02d' % item }}/.snapshots"
            file_type: directory
          loop: "{{ range(1, data_disks | length + 1) | list }}"
          register: snapshot_dirs
          ignore_errors: true

        - name: Delete all snapshots  # noqa command-instead-of-module
          ansible.builtin.command:
            cmd: "btrfs subvolume delete -C {{ item.1.path }}/snapshot"
          loop: "{{ snapshot_dirs.results | subelements('files') }}"
          when: snapshot_dirs.results is defined
          ignore_errors: true

        - name: Remove .snapshots subvolume on all disks  # noqa command-instead-of-module
          ansible.builtin.command:
            cmd: "btrfs subvolume delete -C {{ data_mount_path }}/data{{ '%02d' % item }}/.snapshots"
          loop: "{{ range(1, data_disks | length + 1) | list }}"
          ignore_errors: true

        - name: Recreate all snapper configs
          ansible.builtin.command:
            cmd: "snapper -c data{{ '%02d' % item }} create-config -t default {{ data_mount_path }}/data{{ '%02d' % item }}"
          loop: "{{ range(1, data_disks | length + 1) | list }}"
          register: create_config_result
          failed_when:
            - create_config_result.rc != 0
            - "'Config exists' not in create_config_result.stderr"
            - "'creating btrfs subvolume .snapshots failed since it already exists' not in create_config_result.stderr"
          changed_when: create_config_result.rc == 0

        - name: Ensure 'TIMELINE_CREATE="no"' in each data disk's Snapper configuration after reset
          ansible.builtin.lineinfile:
            path: "/etc/snapper/configs/data{{ '%02d' % item }}"
            regexp: ^TIMELINE_CREATE=
            line: TIMELINE_CREATE="no"
          loop: "{{ range(1, data_disks | length + 1) | list }}"
          ignore_errors: true

        - name: Verify final snapper configs after reset
          ansible.builtin.command:
            cmd: snapper list-configs
          register: snapper_configs_reset
          changed_when: false

        - name: Display final snapper_configs after reset
          ansible.builtin.debug:
            var: snapper_configs_reset

        - name: Verify snapraid-btrfs can see Snapper configs after reset
          ansible.builtin.command:
            cmd: /usr/local/bin/snapraid-btrfs list
          register: snapraid_btrfs_output_reset
          changed_when: false

        - name: Display snapraid-btrfs output after reset
          ansible.builtin.debug:
            var: snapraid_btrfs_output_reset.stdout_lines

        - name: Check for persistent invalid btrfs subvolume
          ansible.builtin.set_fact:
            persistent_invalid_subvolume: "{{ 'is not a valid btrfs subvolume' in snapraid_btrfs_output_reset.stderr }}"

        - name: Fail if invalid subvolume persists
          ansible.builtin.fail:
            msg: "Snapper config failed, try again or check manually."
          when: persistent_invalid_subvolume | bool

    - name: Display error message
      ansible.builtin.debug:
        msg: "Snapper config failed, try again or check manually."
      when: persistent_invalid_subvolume | bool

  always:
    - name: Final verification of Snapper configs
      ansible.builtin.command:
        cmd: snapper list-configs
      register: final_snapper_configs
      changed_when: false

    - name: Display final Snapper configs
      ansible.builtin.debug:
        var: final_snapper_configs.stdout_lines

    - name: Final verification of snapraid-btrfs
      ansible.builtin.command:
        cmd: /usr/local/bin/snapraid-btrfs list
      register: final_snapraid_btrfs_output
      changed_when: false
      ignore_errors: true

    - name: Display final snapraid-btrfs output
      ansible.builtin.debug:
        var: final_snapraid_btrfs_output.stdout_lines
